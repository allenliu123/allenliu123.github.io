<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>Fedora28 上开自定义热点</title>
      <link href="/Custom-hotspot-on-Fedora28/"/>
      <url>/Custom-hotspot-on-Fedora28/</url>
      <content type="html"><![CDATA[<p>fedora28的GNome桌面可以开热点了，但是有时候是需要用命令行来开热点怎么办</p><p>先开启wifi<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nmcli radio wifi on</span><br><span class="line">nmcli con up Hotspot ifname wlp3s0</span><br></pre></td></tr></table></figure></p><p>不出意外，现在就开好了热点，名字和密码都是你上一次的一样</p><p>但如果不知道密码或者想改密码，那就需要下面这几步了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim  /etc/sysconfig/network-scripts/ifcfg-Hotspot</span><br></pre></td></tr></table></figure><p>里面有个ESSID就是用户名</p><p>如果要修改密码的话，修改下面这个文件修改WPA_PSK的值就行了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/sysconfig/network-scripts/keys-Hotspot</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Linux上 MongoDB 实现远程连接并设置账号密码</title>
      <link href="/linux-mongodb-authentication/"/>
      <url>/linux-mongodb-authentication/</url>
      <content type="html"><![CDATA[<p>本地系统：Fedora 28<br>服务器系统：CentOS 7</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>在本地安装客户端</p><blockquote><p>sudo dnf install mondodb </p></blockquote><p>在服务器上安装服务端</p><blockquote><p>sudo dnf install mongodb-server </p></blockquote><p>基本的操作网上很多（比如指定数据库路径–dbpath，指定端口–port），这里就不缀述了，我觉得菜鸟教程不错，给个链接<a href="http://www.runoob.com/mongodb/mongodb-tutorial.html" target="_blank" rel="noopener">http://www.runoob.com/mongodb/mongodb-tutorial.html</a></p><h2 id="设置可远程连接"><a href="#设置可远程连接" class="headerlink" title="设置可远程连接"></a>设置可远程连接</h2><p>开启服务时加上 –bind_ip_all 参数就会设置了可以远程连接, 可用netstat -nltp来查看</p><blockquote><p>mongod –bind_ip_all<br>netstat -nltp<br><img src="https://yjqing.xin/file/Screenshot%20from%202018-08-14%2004-30-47.png" alt="图片描述"></p></blockquote><p>端口号为27017前面的ip是0.0.0.0而不是127.0.0.1表示正确</p><p>现在就可以在客户端来连接了</p><h2 id="设置账号密码"><a href="#设置账号密码" class="headerlink" title="设置账号密码"></a>设置账号密码</h2><p>MongoDB 默认安装完成以后，只允许本地连接，同时不需要使用任何账号密码就可以直接连接MongoDB，这样是很不安全的，所以我们要设个密码</p><p>服务器端开启服务，非auth验证方式</p><blockquote><p>mongod  –bind_ip_all</p></blockquote><p>客户端连接</p><blockquote><p>mongo [yourIP]:27017<br>use admin</p></blockquote><p>创建管理员账户</p><blockquote><p>db.createUser({ user: “useradmin”, pwd: “adminpassword”, roles: [{ role: “userAdminAnyDatabase”, db: “admin” }] })</p></blockquote><p>mongodb中的用户是基于身份role的，该管理员账户的 role是 userAdminAnyDatabase。 ‘userAdmin’代表用户管理身份，’AnyDatabase’ 代表可以管理任何数据库</p><p>创建普通用户（为了安全，应该每个数据库或者每个业务都创建自己的账户，这样即使一个业务密码被别人知道了，不会影响到其他的数据库）</p><blockquote><p>use yourdatabase<br>db.createUser({ user: “youruser”, pwd: “yourpassword”, roles: [{ role: “dbOwner”, db: “yourdatabase” }] })</p></blockquote><p>服务器上账户创建完成后，ctrl C 掉，重新用密码验证方式开启服务</p><p>服务器端重启服务，auth验证方式</p><blockquote><p>mongod –auth –bind_ip_all //加了–auth 表示需要验证用户名密码</p></blockquote><h2 id="客户端连接"><a href="#客户端连接" class="headerlink" title="客户端连接"></a>客户端连接</h2><p>客户端连接</p><blockquote><p>mongo [yourIP]:27017<br>use admin // 需要先选择admin数据库才可以作验证<br>db.auth(‘useradmin’,’adminpassword’) // 返回1就表示验证成功，获得所有权限了</p></blockquote><p>ps：上面的方式太麻烦，其实客户端用户名密码连接还有类似mysql的连接方式</p><blockquote><p>mongo localhost:27017/admin -u useradmin -p //如果是普通用户的话，admin 改为你的数据库</p></blockquote>]]></content>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> mongodb </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>fedora 28 安装后的配置</title>
      <link href="/Fedora-28-configuration-after-installation/"/>
      <url>/Fedora-28-configuration-after-installation/</url>
      <content type="html"><![CDATA[<p>现在重装过我的linux系统大概3次，每次装完系统都要配置好半天，不像windows一样，装完之后就可以用了，还会出现不少的问题，现在作一个记录，为了下次的重装系统不再麻烦</p><h2 id="安装shadowsocks"><a href="#安装shadowsocks" class="headerlink" title="安装shadowsocks"></a>安装shadowsocks</h2><p>shadowsocks 在我之前都是可以用的，但是，我在今天的fedora28后，用sudo dnf install shadowsocks-qt5 后发现用不了了，网上一查，好多都说用不了了，后来有一个老铁说可以用shadowsocks-libev代替，下面写一些步骤</p><ul><li>sudo dnf install shadowsocks-libev</li><li><p>配置一下 /etc/shadowsocks-libev/config.json</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;server&quot;:&quot;你的服务器ip或域名&quot;,</span><br><span class="line">    &quot;server_port&quot;:服务器端口,</span><br><span class="line">    &quot;local_port&quot;:本地端口,</span><br><span class="line">    &quot;password&quot;:&quot;密码&quot;,</span><br><span class="line"> &quot;timeout&quot;:60,</span><br><span class="line">    &quot;method&quot;:&quot;加密方式&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>ss-local [-c /etc/shadowsocks-libev/config.json]<br>这样就搞定了<br>这是用配置文件的方式，可以用另外一种方式</p></li></ul><blockquote><p>ss-local -s 服务器地址 -p 服务器端口 -l 本地端端口 -k 密码 -m 加密方法</p></blockquote><p>配合nohup和&amp;可以使之后台运行，关闭终端也不影响</p><blockquote><p>nohup ss-local &gt; /dev/null 2&gt;&amp;1 &amp;</p></blockquote><p>shadowsocks客户端启动后，其他程序并不会直接应用socks5连接，浏览器要用一些插件来连接，比如SwitchOmega</p><h2 id="下载SwitchyOmega"><a href="#下载SwitchyOmega" class="headerlink" title="下载SwitchyOmega"></a>下载SwitchyOmega</h2><p>chrome 的插件商店是需要翻墙的，以前可以到其他地方把这个插件下载下来，拖进插件管理中心就行了。但是现在版本更新后好像不行了<br>我的所有插件都是和chrome账户同步了的，所以我只需要登陆账户就行了，那么问题就来了，chrome登陆账户也是需要翻墙的<br>现在的办法就是用全局代理，给出设置后的截图</p><p><img src="https://yjqing.xin/file/blog2.png" alt="text"></p><p>设置好之后就全局代理了</p><h2 id="proxychains"><a href="#proxychains" class="headerlink" title="proxychains"></a>proxychains</h2><p>如果某个应用想要临时代理以下，那就需要用到proxychains了</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><blockquote><p>sudo dnf install proxychains</p></blockquote><h3 id="配置-etc-proxychains-conf"><a href="#配置-etc-proxychains-conf" class="headerlink" title="配置 /etc/proxychains.conf"></a>配置 /etc/proxychains.conf</h3><p>把这个文件最后一行改为</p><blockquote><p>socks5  127.0.0.1 1080</p></blockquote><p>在开启shadowsocks的情况下，就可以直接用 proxychains4 某某程序 来临时代理一下了</p><h2 id="i3管理器"><a href="#i3管理器" class="headerlink" title="i3管理器"></a>i3管理器</h2><p>作为一个非常强大的平铺式桌面管理器，在我朋友@nova第一次给我用了之后就爱不释手了，我的朋友们全都在用它</p><h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><p>借助nova的博客<a href="https://nova.moe/" target="_blank" rel="noopener">https://nova.moe/</a>，安装</p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>配置文件在 /home/allen/.config/i3/config，我的配置文件在<a href="https://github.com/allenliu123/config/blob/master/config" target="_blank" rel="noopener">我的github</a>上</p><h3 id="配置i3中文输入法"><a href="#配置i3中文输入法" class="headerlink" title="配置i3中文输入法"></a>配置i3中文输入法</h3><p>i3里面只有英文输入，对于一个中国人必须要一个中文输入法呀<br>执行两步就够了</p><blockquote><p>终端输入 ibus-daemon<br>然后ibus-setup添加中文 </p></blockquote><p>搞定</p><h2 id="好用的工具-sublime-text3"><a href="#好用的工具-sublime-text3" class="headerlink" title="好用的工具 sublime-text3"></a>好用的工具 sublime-text3</h2><p>sublime 是一个非常小，但是功能非常强大的文本编辑器</p><h3 id="安装-2"><a href="#安装-2" class="headerlink" title="安装"></a>安装</h3><blockquote><p>sudo dnf install sublime-text</p></blockquote><p>如果没有的话，可能需要自己到官网上下载repo</p><h3 id="配置主题-boxy"><a href="#配置主题-boxy" class="headerlink" title="配置主题(boxy)"></a>配置主题(boxy)</h3><p>boxy 是我非常喜欢的主题，尤其是包里面的tomorrow</p><blockquote><p>ctrl + shift + p -&gt; install package control</p></blockquote><p>它会安装Package Control 功能</p><blockquote><p>现在 ctrl + shift + p -&gt; package control install package -&gt; boxy theme</p></blockquote><p>左下角会有安装进度<br>安装完了就可以设置主题了</p><blockquote><p>Preferences -&gt; Theme -&gt; Boxy Tomorrow.sublime-theme<br>Preferences -&gt; Color Theme -&gt; Boxy Tomorrow</p></blockquote><p>基本上的配置就完成了，给个截图吧</p><p><img src="https://yjqing.xin/file/blog3.png" alt="success"></p>]]></content>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> chrome </tag>
            
            <tag> sublime </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>用JOCL做GPU编程</title>
      <link href="/jocl/"/>
      <url>/jocl/</url>
      <content type="html"><![CDATA[<h2 id="JOCL-介绍"><a href="#JOCL-介绍" class="headerlink" title="JOCL 介绍"></a>JOCL 介绍</h2><p>jocl实际上就是对opencl用java语言进行了封装，许多代码都和opencl一样，这一点使得用过opencl的可以非常快的上手，可以到github查看<a href="https://github.com/gpu/JOCL" target="_blank" rel="noopener">源码</a></p><p>由于java没有指针，所以jocl不得不用Pointer来获取地址，这样就感觉jocl其实看起来比opencl还要复杂</p><h2 id="JOCL-开发环境搭建"><a href="#JOCL-开发环境搭建" class="headerlink" title="JOCL 开发环境搭建"></a>JOCL 开发环境搭建</h2><p>参考别人的文章<a href="https://my.oschina.net/qutterrtl/blog/1531327" target="_blank" rel="noopener">https://my.oschina.net/qutterrtl/blog/1531327</a> 完成jocl开发环境搭建</p><ol><li>更新显卡驱动</li><li>安装opencl驱动，应该最新版本的显卡驱动都是支持opencl的，可以用 GPU Caps Viewer 来测试，如果没有，AMD的话可以到<a href="https://support.amd.com/en-us/kb-articles/Pages/OpenCL2-Driver.aspx" target="_blank" rel="noopener">https://support.amd.com/en-us/kb-articles/Pages/OpenCL2-Driver.aspx</a> 下载驱动</li><li>下载opencl sdk<ul><li>Inter <a href="https://software.intel.com/en-us/intel-opencl/download" target="_blank" rel="noopener">https://software.intel.com/en-us/intel-opencl/download</a></li><li>AMD <a href="https://developer.amd.com/tools-and-sdks" target="_blank" rel="noopener">https://developer.amd.com/tools-and-sdks</a></li><li>Nvidia <a href="https://developer.nvidia.com/opencl" target="_blank" rel="noopener">https://developer.nvidia.com/opencl</a></li></ul></li><li>下载安装jdk <a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" target="_blank" rel="noopener">http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html</a>，不要忘了设置环境变量</li><li>下载安装eclipse <a href="http://www.eclipse.org/downloads/eclipse-packages" target="_blank" rel="noopener">http://www.eclipse.org/downloads/eclipse-packages</a></li><li>下载jar包 <a href="http://www.jocl.org/downloads/downloads.html" target="_blank" rel="noopener">http://www.jocl.org/downloads/downloads.html</a>，需要提取里面的相应jar文件放到项目Referenced Libraries里面，把dll文件放到jdk安装路径/bin下</li><li>现在可以直接到官网 <a href="http://www.jocl.org/samples/samples.html" target="_blank" rel="noopener">http://www.jocl.org/samples/samples.html</a> 找sample来运行了</li></ol><h2 id="封装JOCL"><a href="#封装JOCL" class="headerlink" title="封装JOCL"></a>封装JOCL</h2><p>原始的jocl就是对opencl的C语言的重写，是比较麻烦的，下面给出封装代码</p><p>PackJocl.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> jocl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.jocl.CL.CL_CONTEXT_PLATFORM;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.jocl.CL.CL_DEVICE_TYPE_GPU;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.jocl.CL.CL_MEM_COPY_HOST_PTR;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.jocl.CL.CL_MEM_READ_ONLY;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.jocl.CL.CL_TRUE;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.jocl.CL.clBuildProgram;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.jocl.CL.clCreateBuffer;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.jocl.CL.clCreateCommandQueue;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.jocl.CL.clCreateContext;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.jocl.CL.clCreateKernel;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.jocl.CL.clCreateProgramWithSource;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.jocl.CL.clEnqueueNDRangeKernel;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.jocl.CL.clEnqueueReadBuffer;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.jocl.CL.clGetDeviceIDs;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.jocl.CL.clGetPlatformIDs;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.jocl.CL.clReleaseCommandQueue;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.jocl.CL.clReleaseContext;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.jocl.CL.clReleaseKernel;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.jocl.CL.clReleaseMemObject;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.jocl.CL.clReleaseProgram;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.jocl.CL.clSetKernelArg;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileReader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.jocl.CL;</span><br><span class="line"><span class="keyword">import</span> org.jocl.Pointer;</span><br><span class="line"><span class="keyword">import</span> org.jocl.Sizeof;</span><br><span class="line"><span class="keyword">import</span> org.jocl.cl_command_queue;</span><br><span class="line"><span class="keyword">import</span> org.jocl.cl_context;</span><br><span class="line"><span class="keyword">import</span> org.jocl.cl_context_properties;</span><br><span class="line"><span class="keyword">import</span> org.jocl.cl_device_id;</span><br><span class="line"><span class="keyword">import</span> org.jocl.cl_kernel;</span><br><span class="line"><span class="keyword">import</span> org.jocl.cl_mem;</span><br><span class="line"><span class="keyword">import</span> org.jocl.cl_platform_id;</span><br><span class="line"><span class="keyword">import</span> org.jocl.cl_program;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * A small JOCL sample.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PackJocl</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">cl_context context;<span class="comment">// 上下文</span></span><br><span class="line">cl_command_queue commandQueue;<span class="comment">// 命令队列</span></span><br><span class="line">cl_program program;<span class="comment">// 程序对象</span></span><br><span class="line">cl_kernel kernel;<span class="comment">// Kernel对象</span></span><br><span class="line">cl_mem memObjects[];<span class="comment">// 内存对象数组</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 读取文件的内容</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file 想要读取的文件对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回文件内容</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">readCl</span><span class="params">(File file)</span></span>&#123;</span><br><span class="line">        StringBuilder result = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(file));<span class="comment">//构造一个BufferedReader类来读取文件</span></span><br><span class="line">            String s = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">while</span>((s = br.readLine())!=<span class="keyword">null</span>)&#123;<span class="comment">//使用readLine方法，一次读一行</span></span><br><span class="line">                result.append(System.lineSeparator()+s);</span><br><span class="line">            &#125;</span><br><span class="line">            br.close();    </span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result.toString();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    PackJocl()&#123;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加载平台和驱动</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> platformIdx 平台index</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> deviceIdx 驱动index</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"deprecation"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> platformIdx, <span class="keyword">int</span> deviceIdx)</span></span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> platformIndex = platformIdx; <span class="comment">// 选择哪个平台</span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">long</span> deviceType = CL_DEVICE_TYPE_GPU;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> deviceIndex = deviceIdx;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Enable exceptions and subsequently omit error checks in this sample</span></span><br><span class="line">        CL.setExceptionsEnabled(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Obtain the number of platforms</span></span><br><span class="line">        <span class="keyword">int</span> numPlatformsArray[] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">1</span>];</span><br><span class="line">        clGetPlatformIDs(<span class="number">0</span>, <span class="keyword">null</span>, numPlatformsArray);</span><br><span class="line">        <span class="keyword">int</span> numPlatforms = numPlatformsArray[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Obtain a platform ID</span></span><br><span class="line">        cl_platform_id platforms[] = <span class="keyword">new</span> cl_platform_id[numPlatforms];</span><br><span class="line">        clGetPlatformIDs(platforms.length, platforms, <span class="keyword">null</span>);</span><br><span class="line">        cl_platform_id platform = platforms[platformIndex];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Initialize the context properties</span></span><br><span class="line">        cl_context_properties contextProperties = <span class="keyword">new</span> cl_context_properties();</span><br><span class="line">        contextProperties.addProperty(CL_CONTEXT_PLATFORM, platform);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// Obtain the number of devices for the platform</span></span><br><span class="line">        <span class="keyword">int</span> numDevicesArray[] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">1</span>];</span><br><span class="line">        clGetDeviceIDs(platform, deviceType, <span class="number">0</span>, <span class="keyword">null</span>, numDevicesArray);</span><br><span class="line">        <span class="keyword">int</span> numDevices = numDevicesArray[<span class="number">0</span>];</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// Obtain a device ID </span></span><br><span class="line">        cl_device_id devices[] = <span class="keyword">new</span> cl_device_id[numDevices];</span><br><span class="line">        clGetDeviceIDs(platform, deviceType, numDevices, devices, <span class="keyword">null</span>);</span><br><span class="line">        cl_device_id device = devices[deviceIndex];</span><br><span class="line">        context = clCreateContext(</span><br><span class="line">        contextProperties, <span class="number">1</span>, <span class="keyword">new</span> cl_device_id[]&#123;device&#125;, </span><br><span class="line">        <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">    </span><br><span class="line">        <span class="comment">// Create a command-queue for the selected device</span></span><br><span class="line">        commandQueue = clCreateCommandQueue(context, device, <span class="number">0</span>, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建Kernel</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> clName Kernel文件名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> funcName Kernel函数名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createKernel</span><span class="params">(String clName, String funcName)</span></span>&#123;</span><br><span class="line">    program = clCreateProgramWithSource(context, <span class="number">1</span>, <span class="keyword">new</span> String[]&#123;  readCl(<span class="keyword">new</span> File(clName)) &#125;, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// Build the program</span></span><br><span class="line">        clBuildProgram(program, <span class="number">0</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">            </span><br><span class="line">        <span class="comment">// Create the kernel</span></span><br><span class="line">        kernel = clCreateKernel(program, funcName, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建Kernel</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> p 包含所有参数的指针数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> n 分配内存空间大小 </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setParameters</span><span class="params">(Pointer[] p, <span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    memObjects = <span class="keyword">new</span> cl_mem[p.length];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; p.length; i++)&#123;</span><br><span class="line">    memObjects[i] = clCreateBuffer(context, CL_MEM_READ_ONLY | CL_MEM_COPY_HOST_PTR, Sizeof.cl_float * n, p[i], <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; p.length; i++)&#123;</span><br><span class="line">    clSetKernelArg(kernel, i, Sizeof.cl_mem, Pointer.to(memObjects[i]));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 执行Kernel</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dim 维数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> global_work_size[] global_work_size</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> local_work_size[] local_work_size</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(<span class="keyword">int</span> dim, <span class="keyword">long</span> global_work_size[], <span class="keyword">long</span> local_work_size[])</span></span>&#123;</span><br><span class="line">         <span class="comment">// Execute the kernel</span></span><br><span class="line">         clEnqueueNDRangeKernel(commandQueue, kernel, dim, <span class="keyword">null</span>,global_work_size, local_work_size, <span class="number">0</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 把显存里的计算结果取回内存</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index 参数位置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dstPointer 结果指针</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> size 分配内存空间大小 </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getData</span><span class="params">(<span class="keyword">int</span> index, Pointer dstPointer, <span class="keyword">int</span> size)</span></span>&#123;</span><br><span class="line">     clEnqueueReadBuffer(commandQueue, memObjects[index], CL_TRUE, <span class="number">0</span>, size * Sizeof.cl_float, dstPointer, <span class="number">0</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span>&#123;</span><br><span class="line">     clReleaseMemObject(memObjects[<span class="number">0</span>]);</span><br><span class="line">         clReleaseMemObject(memObjects[<span class="number">1</span>]);</span><br><span class="line">         clReleaseMemObject(memObjects[<span class="number">2</span>]);</span><br><span class="line">         clReleaseKernel(kernel);</span><br><span class="line">         clReleaseProgram(program);</span><br><span class="line">         clReleaseCommandQueue(commandQueue);</span><br><span class="line">         clReleaseContext(context);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>PackageTest.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> jocl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.jocl.Pointer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PackageTest</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">PackJocl  jocl= <span class="keyword">new</span> PackJocl();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化，第一个参数是平台index，第二个参数是驱动index</span></span><br><span class="line">jocl.init(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建内核， 第一个是内核文件名，第二个是内核函数名</span></span><br><span class="line">jocl.createKernel(<span class="string">"E://kernel.cl"</span>, <span class="string">"add"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取测试数据并复制到显存</span></span><br><span class="line"><span class="keyword">int</span> n = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">float</span> srcArrayA[] = <span class="keyword">new</span> <span class="keyword">float</span>[n];</span><br><span class="line">        <span class="keyword">float</span> srcArrayB[] = <span class="keyword">new</span> <span class="keyword">float</span>[n];</span><br><span class="line">        <span class="keyword">float</span> dstArray[] = <span class="keyword">new</span> <span class="keyword">float</span>[n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            srcArrayA[i] = i;</span><br><span class="line">            srcArrayB[i] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        Pointer parameters[] = &#123;</span><br><span class="line">        Pointer.to(srcArrayA),</span><br><span class="line">        Pointer.to(srcArrayB),</span><br><span class="line">        Pointer.to(dstArray)&#125;;</span><br><span class="line">        </span><br><span class="line">jocl.setParameters(parameters, n);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行</span></span><br><span class="line">jocl.execute(<span class="number">1</span>,<span class="keyword">new</span> <span class="keyword">long</span>[]&#123;n&#125;, <span class="keyword">new</span> <span class="keyword">long</span>[]&#123;<span class="number">1</span>&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取执行结果</span></span><br><span class="line">jocl.getData(<span class="number">2</span>, Pointer.to(dstArray), n);</span><br><span class="line"></span><br><span class="line"><span class="comment">// clear</span></span><br><span class="line">jocl.clear();</span><br><span class="line"></span><br><span class="line">System.out.println(dstArray[<span class="number">9</span>]);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>kernel.cl 我是放在E盘根目录下，所以PackageTest.java中写的jocl.createKernel(“E://kernel.cl”, “add”); 你可以改成其他的<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">__<span class="function">kernel <span class="keyword">void</span> <span class="title">add</span><span class="params">(__global <span class="keyword">const</span> <span class="keyword">float</span> *a, __global <span class="keyword">const</span> <span class="keyword">float</span> *b, __global <span class="keyword">float</span> *c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> gid = get_global_id(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\t"</span>,gid);</span><br><span class="line">c[gid] = a[gid] + b[gid];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行结果<br><img src="https://yjqing.xin/file/blog1.PNG" alt="blog1.PNG"><br>第一次写文章，希望可以帮助到你</p>]]></content>
      
      
        <tags>
            
            <tag> gpu </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
